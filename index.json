{
  "index.html": {
    "href": "index.html",
    "title": "| SBTech API",
    "keywords": "SBTech has an industry-leading sports betting offer covering more than 55 sports, with 20,000+ events offered for in-play betting per month. Along with providing fully or semi-managed solutions, we ensure our operators have a high degree of control over the trading parameters, including unique pricing and operator level risk management. The pages in this wiki are intended to provide information on the specifics of the Sports Data API. Site operators and developers will gain a perspective of how to utilise it to build a full end-user facing sports application using SBTech as their sports betting provider. More specifically, we will focus on: How to setup and authenticate to start developing and running applications How to build queries and subscribe for updates How to read the response payload How to interpret the structure of the entities and their parameters"
  },
  "lookup/index.html": {
    "href": "lookup/index.html",
    "title": "Lookup API | SBTech API",
    "keywords": "Lookup API Lookup API endpoint URL path structure: GET /api/sportsdata/v2/lookup?sportName=...&locale=... Parameters: sportName (optional) - name of sport. leagueName (optional) - name of league. eventName (optional) - name of event. startEventDate (optional) - start event date, format is yyyyMMdd. locale (mandatory) - name of sport. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: GET /api/sportsdata/v2/lookup?sportName=football&leagueName=mythical-matches&eventName=watford-vs-newcastle&startEventDate=20180829 Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response structure is: { \"data\": { \"events\": [\"id_42\"], \"sports\": [\"id_1\"], \"leagues\": [\"id_5\"] } }"
  },
  "sports-data/endpoints/sports/pull-contract.html": {
    "href": "sports-data/endpoints/sports/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/sports/filtering-and-querying.html": {
    "href": "sports-data/endpoints/sports/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/regions/filtering-and-querying.html": {
    "href": "sports-data/endpoints/regions/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/markets/push-contract.html": {
    "href": "sports-data/endpoints/markets/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/markets/pull-contract.html": {
    "href": "sports-data/endpoints/markets/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/events/pull-contract.html": {
    "href": "sports-data/endpoints/events/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "search/entities_contracts.html": {
    "href": "search/entities_contracts.html",
    "title": "Entities contracts | SBTech API",
    "keywords": "Entities contracts type Event = { id: string eventName: string entityType: number leagueName: string sportId: string sportOrder: number leagueOrder: number isLive: boolean startEventDate: DateTime } type Sport = { id: string entityType: number name: string sportOrder: number totalEventsCount: number } type League = { id: string entityType: number name: string sportOrder: number sportId: string sportName: string leagueOrder: number regionCode: string totalEventsCount: number }"
  },
  "sports-data/endpoints/events/filtering-and-querying.html": {
    "href": "sports-data/endpoints/events/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/best-practices/serialization-format.html": {
    "href": "sports-data/best-practices/serialization-format.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "your-bet/index.html": {
    "href": "your-bet/index.html",
    "title": "Your Bet API | SBTech API",
    "keywords": "Your Bet API Your Bet API endpoint URL path structure: GET /api/sportsdata/v2/yourbet?eventId=...&selections=... Parameters: eventId (mandatory) - id of event. selections (mandatory) - array of selections id's. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: GET /api/sportsdata/v2/yourbet?eventId=12107641&selections=0ML32377171_2,0ML32377151_3 Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response is: { \"data\": { \"eligibleMarkets\": [ { \"id\": \"52884113\", \"selectionIds\": [ \"0QA52884113#612339879_2L41410Q13Q23\", \"0QA52884113#612339857_2L41410Q11Q21\", \"0QA52884113#612339846_2L41410Q10Q20\", \"0QA52884113#612339868_2L41410Q12Q22\" ] }, { \"id\": \"3_32641323\", \"selectionIds\": [ \"0OU32641323U350_3\", \"0OU32641323O350_1\" ] } ], \"selectionsMapped\": [ \"0ML32377171_2\" ], \"trueOdds\": 3.5, \"displayOdds\": { \"american\": \"+250\", \"decimal\": \"3.50\", \"fractional\": \"5/2\", \"hk\": \"2.50\", \"indo\": \"2.50\", \"malay\": \"-0.40\" } } }"
  },
  "sports-data/endpoints/sports/push-contract.html": {
    "href": "sports-data/endpoints/sports/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/regions/push-contract.html": {
    "href": "sports-data/endpoints/regions/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/markets/filtering-and-querying.html": {
    "href": "sports-data/endpoints/markets/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/leagues/push-contract.html": {
    "href": "sports-data/endpoints/leagues/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/leagues/pull-contract.html": {
    "href": "sports-data/endpoints/leagues/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/leagues/filtering-and-querying.html": {
    "href": "sports-data/endpoints/leagues/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/incidents/push-contract.html": {
    "href": "sports-data/endpoints/incidents/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/selections/push-contract.html": {
    "href": "sports-data/endpoints/selections/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/selections/pull-contract.html": {
    "href": "sports-data/endpoints/selections/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/selections/filtering-and-querying.html": {
    "href": "sports-data/endpoints/selections/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/regions/pull-contract.html": {
    "href": "sports-data/endpoints/regions/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/incidents/pull-contract.html": {
    "href": "sports-data/endpoints/incidents/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/events/push-contract.html": {
    "href": "sports-data/endpoints/events/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/basic_concepts/authentication.html": {
    "href": "sports-data/basic_concepts/authentication.html",
    "title": "Push API | SBTech API",
    "keywords": "Push API The Push API should be used to create a subscription based on query and listen on updates. For defining a query the API use OData as a query format (more info about OData supports you can find here). In addition to creating a subscription you also can retrieve initial data and then subscribe on updates in one request, you will find more info about this in the last section. The main difference in terms of querying between Pull API and Push API is that in Push API the query is limited to $filter only, you can send the only $filter which is a query without $top, $skip, $orderBy operators. Any OData query should be URL encoded before being sent. Note that we will not encode the samples in this documentation to improve readability, but you should remember to do it consistently in your code. URL path structure: GET /api/sportsdata/v2/stream/{entity}/?query=...&locale=... Possible entities: events markets selections sports leagues regions Parameters: query (mandatory) - the URL encoded target OData filter. Here is a list of supported OData operators: $filter - allows clients to filter a collection of resources that are addressed by a request URL. from (optional) timeRange (optional) includeMarkets (optional) - the URL encoded additional OData filter to include markets for events ( could be used only for Events endpoint) . initialData - let you get initial snapshot with subscription in one request. locale (optional) - let you specify locale to get translated response. projection (optional) - let you specify what model view to return: onlyId - returns only id default - returns default contract details - returns full contract Limitations: in case if initialData=true the Push API can't return more than 100 elements in one request. Defaults: if locale is not specified, the API will use \"en\". if projection is not specified, the API will use \"default\" Accepting formats: SSE (text/event-stream) - is enabling a browser to receive automatic updates from a server via HTTP connection JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to subscribe on Events endpoint GET /api/sportsdata/v2/stream/events?query=$filter=sportId eq '1' and isLive eq true&locale=en Accept: text/event-stream, application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} After establishing the subscription you will start receiving updates. The response will provide the list of collections: add, remove, change. { \"data\": { \"add\": { \"events\": Event[], \"markets\": Market[] }, \"remove\": { \"events\": [\"id1\", \"id2\"], \"markets\": [\"id1\", \"id2\"] }, \"change\": { \"events\": Event[], \"markets\": Market[] } } }"
  },
  "search/index.html": {
    "href": "search/index.html",
    "title": "Search API | SBTech API",
    "keywords": "Search API General overview Search API provides simple multi-language search capabilities over sports data content. You will be able to search for event.name, league.name, sport.name in one request. Search API is applying 'startWith' for the whole sentence. For example we have a team \"Real Madrid\" : user entered \"Mad\" - \"Real Madrid\" will be found user entered \"Rea\" - \"Real Madrid\" will be found user entered \"drid\" - not found user entered \"Medrid\" - not found Search API endpoint URL path structure: GET /api/sportsdata/v2/search?query=...&locale=... Parameters: query (mandatory) - the URL encoded query string, will be applied to eventName, leagueName, sportName. locale (mandatory) - the locale for translation. If the locale is not supported for the specific operator then a HTTP (400) BadRequest is returned. top (optional) - the number of entities to return. Limitations: query - 50 characters is maximum and 3 characters is minimum query length. top - 40 elements per array is maximum to return. Defaults: if top is not specified, the API will use 20. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to search: Real Madrid. First, we need to URL encode the query: Real Madrid -> Real20%Madrid. Now, we are ready to send a query with specified locale. GET /api/sportsdata/v2/search?query=Real20%Madrid&top=10&locale=en Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response is: { \"data\": { \"events\": Event[], \"sports\": Sport[], \"leagues\": League[] } }"
  },
  "sports-data/endpoints/incidents/filtering-and-querying.html": {
    "href": "sports-data/endpoints/incidents/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/index.html": {
    "href": "sports-data/index.html",
    "title": "Introduction | SBTech API",
    "keywords": "Introduction The Sports Data is a push-based queriable API . You compose a query to target a specific data set and the API creates a Subscription and starts sending updates as they happen. For defining a query the API use OData as a query format (more info about OData supports you can find here) . The API supports these protocols: HTTP (for pull, to query data) SSE (for push, to subscribe and listen to a stream of updates, it works over HTTP). Logically the API is divided into two parts: Pull and Push. The Pull API should be used to query data, to retrieve an initial snapshot of data. The Push API should be used to subscribe on a stream of updates by a specific query. The Sports Data API is a way for our clients to build great real-time user experiences, specifically tailored for their needs. The API provides five endpoints returning five types of objects covering different levels of the offer hierarchy: Sports Leagues Events Markets Selections Regions Objects come with a comprehensive amount of attributes describing all of their significant features and parameter. Based on these, you can build a wide range of presentations and experiences. Some examples of features which can be built using the Sports data API include various navigational widgets, league coupons presenting all events from a league, full live betting section, live betting schedule, event view for both pre-match and in-play events, list of upcoming events, optionally grouped by sport, league etc., list of most popular events (ordered by total amount of stakes or total number of bets) and many more. In short, we aim to provide support for any use case which can be part of a complete user-facing sportsbook solution. Usage of Sports Data API is a subject to a contractual agreement between SBTech and a partnering organization. Authentication is required for the API to be used in development and production environments."
  }
}