{
  "lookup/index.html": {
    "href": "lookup/index.html",
    "title": "PLACEHOLDER | SBTech API",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | SBTech API",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "sports-data/index.html": {
    "href": "sports-data/index.html",
    "title": "Introduction | SBTech API",
    "keywords": "Introduction The Sports Data is a push-based queriable API . You compose a query to target a specific data set and the API creates a Subscription and starts sending updates as they happen. For defining a query the API use OData as a query format (more info about OData supports you can find here) . The API supports these protocols: HTTP (for pull, to query data) SSE (for push, to subscribe and listen to a stream of updates, it works over HTTP). Logically the API is divided into two parts: Pull and Push. The Pull API should be used to query data, to retrieve an initial snapshot of data. The Push API should be used to subscribe on a stream of updates by a specific query. The Sports Data API is a way for our clients to build great real-time user experiences, specifically tailored for their needs. The API provides five endpoints returning five types of objects covering different levels of the offer hierarchy: Sports Leagues Events Markets Regions Objects come with a comprehensive amount of attributes describing all of their significant features and parameter. Based on these, you can build a wide range of presentations and experiences. Some examples of features which can be built using the Sports data API include various navigational widgets, league coupons presenting all events from a league, full live betting section, live betting schedule, event view for both pre-match and in-play events, list of upcoming events, optionally grouped by sport, league etc., list of most popular events (ordered by total amount of stakes or total number of bets) and many more. In short, we aim to provide support for any use case which can be part of a complete user-facing sportsbook solution. Usage of Sports Data API is a subject to a contractual agreement between SBTech and a partnering organization. Authentication is required for the API to be used in development and production environments."
  },
  "search/index.html": {
    "href": "search/index.html",
    "title": "PLACEHOLDER | SBTech API",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "sports-data/push_api.html": {
    "href": "sports-data/push_api.html",
    "title": "Push API | SBTech API",
    "keywords": "Push API The Push API should be used to create a subscription based on query and listen on updates. For defining a query the API use OData as a query format (more info about OData supports you can find here). In addition to creating a subscription you also can retrieve initial data and then subscribe on updates in one request, you will find more info about this in the last section. Any OData query should be URL encoded before being sent. Note that we will not encode the samples in this documentation to improve readability, but you should remember to do it consistently in your code. URL path structure: GET /api/sportsdata/v2/stream/{entity}/?query=...&locale=... Parameters: query (mandatory) - target OData filter. Here is a list of supported OData operators: $filter - allows clients to filter a collection of resources that are addressed by a request URL. from (optional) timeRange (optional) includeMarkets (optional) - additional OData query parameter to include markets for events ( could be used only for Events endpoint) . includeSelections (optional) - additional OData query parameter to include selections for markets (could be used only for Markets endpoint) initialData - let you get initial snapshot with subscription in one request. locale (optional) - let you specify locale to get translated response. projection (optional) - let you specify what model view to return: onlyId - returns only id default - returns default contract details - returns full contract Limitations: in case if initialData=true the Push API can't return more than 100 elements in one request. Defaults: if locale is not specified, the API will use \"en\". if projection is not specified, the API will use \"default\" Accepting formats: SSE (text/event-stream) - is enabling a browser to receive automatic updates from a server via HTTP connection JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip deflate lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to subscribe on Events endpoint GET /api/sportsdata/v2/events?query=$filter=sportId eq '1' and isLive eq true&locale=en Accept: text/event-stream, application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} After establishing the subscription you will start receiving updates. The response will provide the list of collections: add, remove, change. { data: { add: { events: [], markets: [] }, remove: { events: [\"id1\", \"id2\"], markets: [\"id1\", \"id2\"] }, change: { events: [], markets: [] } } }"
  },
  "sports-data/pull_api.html": {
    "href": "sports-data/pull_api.html",
    "title": "Pull API | SBTech API",
    "keywords": "Pull API The Pull API should be used to query data, to retrieve an initial snapshot of data. For defining a query the API use OData as a query format (more info about OData supports you can find here). With Pull API you can build complex OData query since it supports operators like: Top, Skip, OrderBy which is not supported in Push API. Any OData query should be URL encoded before being sent. Note that we will not encode the samples in this documentation to improve readability, but you should remember to do it consistently in your code. URL path structure: GET /api/sportsdata/v2/{entity}/?query=...&locale=... Parameters: query (mandatory) - target OData query. Here is a list of supported OData operators: $filter - allows clients to filter a collection of resources that are addressed by a request URL. $top - number of items in the queried collection to be included in the result. $skip - number of items in the queried collection that are to be skipped and not included in the result. $orderBy - allows clients to request resources in either ascending order using asc or descending order using desc. from (optional) timeRange (optional) includeMarkets (optional) - additional OData query parameter to include markets for events ( could be used only for Events endpoint) . includeSelections (optional) - additional OData query parameter to include selections for markets (could be used only for Markets endpoint) locale (optional) - let you specify locale to get translated response. projection (optional) - let you specify what model view to return: onlyId - returns only id default - returns default contract details - returns full contract Limitations: $top 100 is max value - the Pull API can't return more than 100 elements in one request. Defaults: if locale is not specified, the API will use \"en\". if $top operator is not specified, the API set 100 if $orderBy operator is not specified, the API applies default order for specific entity (more info about possible order you can find here) . If asc or desc not specified, then the resources will be ordered in ascending order. if projection is not specified, the API will use \"default\" Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip deflate lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to query Events endpoint GET /api/sportsdata/v2/events?query=$filter=sportId eq '1' and isLive eq true&$orderBy=startEventDate&locale=en Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response will provide the current snapshot of the targeted data. { \"data\": { \"events\": [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}], \"markets\": [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}] } }"
  }
}