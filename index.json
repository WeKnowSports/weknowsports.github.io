{
  "sports-data/basic_concepts/authentication.html": {
    "href": "sports-data/basic_concepts/authentication.html",
    "title": "Push API | SBTech API",
    "keywords": "Push API The Push API should be used to create a subscription based on query and listen on updates. For defining a query the API use OData as a query format (more info about OData supports you can find here). In addition to creating a subscription you also can retrieve initial data and then subscribe on updates in one request, you will find more info about this in the last section. The main difference in terms of querying between Pull API and Push API is that in Push API the query is limited to $filter only, you can send the only $filter which is a query without $top, $skip, $orderBy operators. Any OData query should be URL encoded before being sent. Note that we will not encode the samples in this documentation to improve readability, but you should remember to do it consistently in your code. URL path structure: GET /api/sportsdata/v2/stream/{entity}/?query=...&locale=... Possible entities: events markets selections sports leagues regions Parameters: query (mandatory) - the URL encoded target OData filter. Here is a list of supported OData operators: $filter - allows clients to filter a collection of resources that are addressed by a request URL. from (optional) timeRange (optional) includeMarkets (optional) - the URL encoded additional OData filter to include markets for events ( could be used only for Events endpoint) . initialData - let you get initial snapshot with subscription in one request. locale (optional) - let you specify locale to get translated response. projection (optional) - let you specify what model view to return: onlyId - returns only id default - returns default contract details - returns full contract Limitations: in case if initialData=true the Push API can't return more than 100 elements in one request. Defaults: if locale is not specified, the API will use \"en\". if projection is not specified, the API will use \"default\" Accepting formats: SSE (text/event-stream) - is enabling a browser to receive automatic updates from a server via HTTP connection JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to subscribe on Events endpoint GET /api/sportsdata/v2/stream/events?query=$filter=sportId eq '1' and isLive eq true&locale=en Accept: text/event-stream, application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} After establishing the subscription you will start receiving updates. The response will provide the list of collections: add, remove, change. { \"data\": { \"add\": { \"events\": Event[], \"markets\": Market[] }, \"remove\": { \"events\": [\"id1\", \"id2\"], \"markets\": [\"id1\", \"id2\"] }, \"change\": { \"events\": Event[], \"markets\": Market[] } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "| SBTech API",
    "keywords": "SBTech has an industry-leading sports betting offer covering more than 55 sports, with 20,000+ events offered for in-play betting per month. Along with providing fully or semi-managed solutions, we ensure our operators have a high degree of control over the trading parameters, including unique pricing and operator level risk management. The pages in this wiki are intended to provide information on the specifics of the Sports Data API. Site operators and developers will gain a perspective of how to utilise it to build a full end-user facing sports application using SBTech as their sports betting provider. More specifically, we will focus on: How to setup and authenticate to start developing and running applications How to build queries and subscribe for updates How to read the response payload How to interpret the structure of the entities and their parameters"
  },
  "search/index.html": {
    "href": "search/index.html",
    "title": "Search API | SBTech API",
    "keywords": "Search API General overview Search API provides simple multi-language search capabilities over sports data content. You will be able to search for event.name, league.name, sport.name in one request. Search API is applying 'startWith' for the whole sentence. For example we have a team \"Real Madrid\" : user entered \"Mad\" - \"Real Madrid\" will be found user entered \"Rea\" - \"Real Madrid\" will be found user entered \"drid\" - not found user entered \"Medrid\" - not found Search API endpoint URL path structure: GET /api/sportsdata/v2/search?query=...&locale=... Parameters: query (mandatory) - the URL encoded query string, will be applied to eventName, leagueName, sportName. locale (mandatory) - the locale for translation. If the locale is not supported for the specific operator then a HTTP (400) BadRequest is returned. top (optional) - the number of entities to return. Limitations: query - 50 characters is maximum and 3 characters is minimum query length. top - 40 elements per array is maximum to return. Defaults: if top is not specified, the API will use 20. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: Let's try to search: Real Madrid. First, we need to URL encode the query: Real Madrid -> Real20%Madrid. Now, we are ready to send a query with specified locale. GET /api/sportsdata/v2/search?query=Real20%Madrid&top=10&locale=en Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response is: { \"data\": { \"events\": Event[], \"sports\": Sport[], \"leagues\": League[] } }"
  },
  "sports-data/endpoints/sports/filtering-and-querying.html": {
    "href": "sports-data/endpoints/sports/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/selections/push-contract.html": {
    "href": "sports-data/endpoints/selections/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/selections/pull-contract.html": {
    "href": "sports-data/endpoints/selections/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/incidents/push-contract.html": {
    "href": "sports-data/endpoints/incidents/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "search/entities_contracts.html": {
    "href": "search/entities_contracts.html",
    "title": "Entities contracts | SBTech API",
    "keywords": "Entities contracts type Event = { id: string eventName: string entityType: number leagueName: string sportId: string sportOrder: number leagueOrder: number isLive: boolean startEventDate: DateTime } type Sport = { id: string entityType: number name: string sportOrder: number totalEventsCount: number } type League = { id: string entityType: number name: string sportOrder: number sportId: string sportName: string leagueOrder: number regionCode: string totalEventsCount: number }"
  },
  "sports-data/endpoints/leagues/pull-contract.html": {
    "href": "sports-data/endpoints/leagues/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/leagues/filtering-and-querying.html": {
    "href": "sports-data/endpoints/leagues/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "lookup/index.html": {
    "href": "lookup/index.html",
    "title": "Lookup API | SBTech API",
    "keywords": "Lookup API Lookup API endpoint URL path structure: GET /api/sportsdata/v2/lookup?sportName=...&locale=... Parameters: sportName (optional) - name of sport. leagueName (optional) - name of league. eventName (optional) - name of event. startEventDate (optional) - start event date, format is yyyyMMdd. locale (mandatory) - name of sport. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: GET /api/sportsdata/v2/lookup?sportName=football&leagueName=mythical-matches&eventName=watford-vs-newcastle&startEventDate=20180829 Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response structure is: { \"data\": { \"events\": [\"id_42\"], \"sports\": [\"id_1\"], \"leagues\": [\"id_5\"] } }"
  },
  "sports-data/endpoints/regions/filtering-and-querying.html": {
    "href": "sports-data/endpoints/regions/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/markets/pull-contract.html": {
    "href": "sports-data/endpoints/markets/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/markets/filtering-and-querying.html": {
    "href": "sports-data/endpoints/markets/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/events/push-contract.html": {
    "href": "sports-data/endpoints/events/push-contract.html",
    "title": "Push contract | SBTech API",
    "keywords": "Push contract { //The properties with value null are not returning in contract. id: string participants: Participant[] totalMarketsCount: number marketLinesCount: number status: string score: GameScore | null isLive: boolean liveGameState?: LiveGameState isSuspended: boolean metadata: Dictionary<any> } Name Description Format Returnable Queryable Example id Specifies the identifier of the sports event. string Yes query (using eq, ne, or, and, in) $filter=Id eq '11754652' type Specifies the type of the sports event. Possible values are \"Fixture\" and \"Outright\" for most sports and \"AntePostRace\" and \"DayOfEventRace\" for racing sports. string No query (using eq, ne, or, and, in) $filter=type eq (ne) 'Fixture' sportId Specifies the identifier of the sport. string No query (using eq, ne, or, and, in) $filter=sportId eq (ne) '12' sportName Specifies the name of the sport (translated). string No query (using eq, ne, or, and, in) $filter=sportName eq 'Soccer' sportOrder Specifies the sorting order of the sport. number No $orderby (only asc ) $orderby=sportOrder asc regionId Specifies the identifier of the region. string No query (using eq, ne, or, and, in) $filter=regionId eq '260' regionCode Specifies ISO country code or (for regions in country) region code. string No query (using eq, ne, or, and, in) $filter=regionCode eq 'EN' regionName Specifies the name of the region. string No query (using eq, ne, or, and, in) $filter=regionName eq 'England' leagueId Specifies the identifier of the league. string No query (using eq, ne, or, and, in) $filter=leagueId eq '36690' leagueName Specifies the name (translated) of the league. string No query (using eq, ne, or, and, in) $filter=leagueName eq 'English Football League Cup' leagueOrder Specifies the sorting order of the league. number No (using eq, ne, or, and, in) $filter=leagueOrder eq 580150 isTopLeague Specifies if the league is marked with a top flag. Boolean No query (using eq, ne) $filter=isTopLeague eq false participants Specifies the participants in the event. Parameters of the Participant object are described in a separate table below. Array Yes query (using lambda, eq, ne, or, and, in) $filter=participants/any(p: p/id eq '357') eventName Specifies the name of the event. For events of type \"Fixture\" it is composed of participants name, e.g. \"ParticipantHome vs ParticipantAway\". Order of teams is reversed if swapTeams: true . If you want, you can ignore this value and compose it locally in a different format. string No query (using eq, ne, or, and, in) $filter=eventName eq 'Chelsea vs Bournemouth' betslipLine Specifies the presentation of the event in the bet slip in the context of each of its selections. To be used in conjunction with the respective Market.selections[].betslipLine and Market.betslipLine values. string No query (using eq, ne, or, and, in) $filter=betslipLine eq 'Clonmel: 12:15' marketGroups Specifies the market groups defined within the event. MarketGroup No query (using lambda, eq, ne, or, and, in) Сan't query this together with marketTypes. $filter=marketGroups/any(p: p/name eq 'Corners') totalMarketsCount Specifies the total markets count. Not affected by the IncludeMarkets filter, i.e. always returns the total count of available markets for the event. number Yes $orderby (only desc) $orderby=totalMarketsCount desc marketLinesCount Specifies the total number of markets, with point lines counted as separate markets. Not affected by the IncludeMarkets filter, i.e. always returns the total count of available markets for the event. number Yes query (using lambda, eq, ne, or, and, in) $filter=marketLinesCount eq 0 totalBets Number of bets placed for entity. number No $orderby (only desc) $orderby=totalBets desc totalDeposit Total deposit of all bets placed for entity. number No $orderby (only asc) $orderby=startEventDate asc startEventDate Specifies the date and time of the beginning of the event. ISODateTimeString No $orderby (only asc) $orderby=startEventDate asc status Specifies the status of the event. Possible values are \"NotStarted\", \"InProgress\" (for most sports), \"RaceOff\" (for racing sports), \"Resulted\" (supported only for racing sports got now; events from other sports will be removed before moving into this status). string Yes query (using eq, ne, or, and, in) $filter=status eq 'NotStarted' score Specifies the current score of the event. GameScore Yes query (using lambda, eq, ne, or, and, in) $filter=score/awayScore eq '0' isLive Specifies if the event is currently traded live. Boolean Yes query (using eq, ne) $filter=isLive eq false isGoingLive Specifies if the event is going live when started, can be true for pre-match events only. Boolean No query (using eq, ne) $filter=isGoingLive eq false liveGameState Specifies additional information on the event such as status, score, current time. See all parameters in a table below. LiveGameState Yes query (using lambda, eq, ne, or, and, in) $filter=liveGameState/gamePart eq 'SecondHalf' tags Specifies additional information on the event. string No query (using lambda, eq, ne, or, and, in) $filter=tags/any(s: s eq 'LiveStream') media Specifies list of available mapping data to external media providers for the event, such us live streaming, statistics, match tracker widgets etc. Media No query (using lambda, eq, ne, or, and, in) $filter=media/any(p: p/mediaType eq 'LiveStreaming') metadata Specifies additional information on the event. string Yes No -- isSuspended Specifies if the event is suspended. boolean Yes query (using eq, ne) $filter=isSuspended eq false isTeamSwap Specifies if the suggested presentation of the event implies to show the away team first. Relevant only for Fixture events. boolean No query (using eq, ne) $filter=isTeamSwap eq false"
  },
  "sports-data/endpoints/incidents/pull-contract.html": {
    "href": "sports-data/endpoints/incidents/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/incidents/filtering-and-querying.html": {
    "href": "sports-data/endpoints/incidents/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/events/filtering-and-querying.html": {
    "href": "sports-data/endpoints/events/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/best-practices/serialization-format.html": {
    "href": "sports-data/best-practices/serialization-format.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/index.html": {
    "href": "sports-data/index.html",
    "title": "Introduction | SBTech API",
    "keywords": "Introduction The Sports Data is a push-based queriable API . You compose a query to target a specific data set and the API creates a Subscription and starts sending updates as they happen. For defining a query the API use OData as a query format (more info about OData supports you can find here) . The API supports these protocols: HTTP (for pull, to query data) SSE (for push, to subscribe and listen to a stream of updates, it works over HTTP). Logically the API is divided into two parts: Pull and Push. The Pull API should be used to query data, to retrieve an initial snapshot of data. The Push API should be used to subscribe on a stream of updates by a specific query. The Sports Data API is a way for our clients to build great real-time user experiences, specifically tailored for their needs. The API provides five endpoints returning five types of objects covering different levels of the offer hierarchy: Sports Leagues Events Markets Selections Regions Objects come with a comprehensive amount of attributes describing all of their significant features and parameter. Based on these, you can build a wide range of presentations and experiences. Some examples of features which can be built using the Sports data API include various navigational widgets, league coupons presenting all events from a league, full live betting section, live betting schedule, event view for both pre-match and in-play events, list of upcoming events, optionally grouped by sport, league etc., list of most popular events (ordered by total amount of stakes or total number of bets) and many more. In short, we aim to provide support for any use case which can be part of a complete user-facing sportsbook solution. Usage of Sports Data API is a subject to a contractual agreement between SBTech and a partnering organization. Authentication is required for the API to be used in development and production environments."
  },
  "your-bet/index.html": {
    "href": "your-bet/index.html",
    "title": "Your Bet API | SBTech API",
    "keywords": "Your Bet API Your Bet API endpoint URL path structure: GET /api/sportsdata/v2/yourbet?eventId=...&selections=... Parameters: eventId (mandatory) - id of event. selections (mandatory) - array of selections id's. Accepting formats: JSON (application/json) - is a default format which API is using if Accept header is omitted. MsgPack - (application/msgpack) - is an efficient binary serialization format. It's faster and smaller than JSON and we encourage you use it for production purposes. Accepting encodings: gzip lz4 - fast compression algorithm (can be used only for MsgPack) Examples: GET /api/sportsdata/v2/yourbet?eventId=12107641&selections=0ML32377171_2,0ML32377151_3 Accept: application/json Accept-Encoding: gzip Authorization: Bearer {JWT token} The response is: { \"data\": { \"eligibleMarkets\": [ { \"id\": \"52884113\", \"selectionIds\": [ \"0QA52884113#612339879_2L41410Q13Q23\", \"0QA52884113#612339857_2L41410Q11Q21\", \"0QA52884113#612339846_2L41410Q10Q20\", \"0QA52884113#612339868_2L41410Q12Q22\" ] }, { \"id\": \"3_32641323\", \"selectionIds\": [ \"0OU32641323U350_3\", \"0OU32641323O350_1\" ] } ], \"selectionsMapped\": [ \"0ML32377171_2\" ], \"trueOdds\": 3.5, \"displayOdds\": { \"american\": \"+250\", \"decimal\": \"3.50\", \"fractional\": \"5/2\", \"hk\": \"2.50\", \"indo\": \"2.50\", \"malay\": \"-0.40\" } } }"
  },
  "sports-data/endpoints/selections/filtering-and-querying.html": {
    "href": "sports-data/endpoints/selections/filtering-and-querying.html",
    "title": "Selection | SBTech API",
    "keywords": "Selection export interface Selection { id: string outcomeType: OutcomeType | null group: number name: string title: string | null betslipLine: string participantMapping: string | null displayOdds: Dictionary<string> trueOdds: number points: number | null /* Win or Place for outrights */ tags: string[] /* idsbtech: string */ metadata: Dictionary<any> isDisabled: boolean entityType: EntityType marketId: string } export interface SelectionChange { id: string, displayOdds: Dictionary<string>, trueOdds: number, isDisabled: boolean, metadata: Dictionary<any> } export enum OutcomeType { Home = \"Home\", Tie = \"Tie\", Draw = \"Draw\", Away = \"Away\", OneOrX = \"1X\", XOrTwo = \"X2\", OneTwo = \"12\", Over = \"Over\", Exactly = \"Exactly\", Under = \"Under\", Yes = \"Yes\", No = \"No\", Odd = \"Odd\", Even = \"Even\", ToScoreFirst = \"ToScoreFirst\", ToScoreLast = \"ToScoreLast\", ToScoreAnyTime = \"ToScoreAnyTime\", ToScoreFirstOrLast = \"ToScoreFirstOrLast\", ToScore2OrMore = \"ToScore2OrMore\", ToScore3OrMore = \"ToScore3OrMore\" }"
  },
  "sports-data/endpoints/regions/push-contract.html": {
    "href": "sports-data/endpoints/regions/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/regions/pull-contract.html": {
    "href": "sports-data/endpoints/regions/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/markets/push-contract.html": {
    "href": "sports-data/endpoints/markets/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/sports/push-contract.html": {
    "href": "sports-data/endpoints/sports/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/sports/pull-contract.html": {
    "href": "sports-data/endpoints/sports/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event export type EventType = \"Fixture\" | \"Outright\" /** * Queryable entity */ export interface SportEvent { id: string /** Type of SportEvent. */ type: EventType /** Sport ID. */ sportId: string /** Sport name (translated). */ sportName: string /** Sorting order of Sport. */ sportOrder: number /** Region ID. */ regionId: string /** ISO country code or (for regions in country) region code. */ regionCode: string /** Region name (translated). */ regionName: string /** League ID. */ leagueId: string /** League name (translated). */ leagueName: string /** Sorting order of League. */ leagueOrder: number /** Is league marked with top flag. */ isTopLeague: boolean /** participants in the event. */ participants: Participant[] /** Name of event, for league events */ eventName: string // betslipLine betslipLine: string // not queriable totalMarketsCount: number marketLinesCount: number // not queriable marketGroups: MarketGroup[] /** date/time of game start */ startEventDate: ISODateTimeString /** Status of game serving*/ status: GameStatus /** Score in game*/ score: GameScore | null /** is it live game */ isLive: boolean /** will this game go live when started, for pre-live only and eventType = Game */ isGoingLive: boolean liveGameState: LiveGameState | null /** Is event suspended for some reason */ isSuspended: boolean isTeamSwap: boolean tags: string[] entityType: EntityType metadata: Dictionary<any> media: MediaProvider[] } export interface SportEventChange { id: string, participants: Participant[], totalMarketsCount: number, marketLinesCount: number, status: GameStatus, score: GameScore | null, isLive: boolean, liveGameState: LiveGameState | null, isSuspended: boolean, metadata: Dictionary<any> } export interface MediaProvider { providerName: string providerEventId: string mediaType: string } export interface MarketGroup { id: string name: string order: number } export type VenueRole = \"Home\" | \"Away\" export interface Participant { id: string name: string /** Home | Away */ venueRole: VenueRole | null /** ISO code */ country: string | null /** runnerNumber: number, imageUrl: string, weight: string, age: number, form: string */ metadata: Dictionary<any> } export interface ParticipantChange { metadata: Dictionary<any> } export enum GameStatus { NotStarted = \"NotStarted\", InProgress = \"InProgress\" } export enum ClockDirection { Stopwatch = \"Stopwatch\", Timer = \"Timer\" } export interface GameScore { /** Home team/player top level score */ homeScore: string /** Away team/player top level score */ awayScore: string additionalScores: Dictionary<string> combinedSecondTierScores: string[] } export interface LiveGameState { clockRunning: boolean clockDirection: ClockDirection gameTime: number | null gamePart: GamePart | null } export enum GamePart { FirstOvertime = \"FirstOvertime\", BreakAfterFirstOvertime = \"BreakAfterFirstOvertime\", SecondOvertime = \"SecondOvertime\", FirstSet = \"FirstSet\", SecondSet = \"SecondSet\", ThirdSet = \"ThirdSet\", FourthSet = \"FourthSet\", FifthSet = \"FifthSet\", FirstPeriod = \"FirstPeriod\", BreakAfterFirstPeriod = \"BreakAfterFirstPeriod\", SecondPeriod = \"SecondPeriod\", BreakAfterSecondPeriod = \"BreakAfterSecondPeriod\", ThirdPeriod = \"ThirdPeriod\", BreakAfterThirdPeriod = \"BreakAfterThirdPeriod\", FirstQuarter = \"FirstQuarter\", BreakAfterFirstQuarter = \"BreakAfterFirstQuarter\", SecondQuarter = \"SecondQuarter\", BreakAfterSecondQuarter = \"BreakAfterSecondQuarter\", ThirdQuarter = \"ThirdQuarter\", BreakAfterThirdQuarter = \"BreakAfterThirdQuarter\", FourthQuarter = \"FourthQuarter\", BreakAfterFourthQuarter = \"BreakAfterFourthQuarter\", Overtime = \"Overtime\", FirstHalf = \"FirstHalf\", SecondHalf = \"SecondHalf\", BreakAfterFirstHalf = \"BreakAfterFirstHalf\", FirstInning = \"FirstInning\", SecondInning = \"SecondInning\", ThirdInning = \"ThirdInning\", FourthInning = \"FourthInning\", FifthInning = \"FifthInning\", SixthInning = \"SixthInning\", SeventhInning = \"SeventhInning\", EighthInning = \"EighthInning\", NinthInning = \"NinthInning\", BreakAfterFirstInning = \"BreakAfterFirstInning\", BreakAfterSecondInning = \"BreakAfterSecondInning\", BreakAfterThirdInning = \"BreakAfterThirdInning\", BreakAfterFourthInning = \"BreakAfterFourthInning\", BreakAfterFifthInning = \"BreakAfterFifthInning\", BreakAfterSixthInning = \"BreakAfterSixthInning\", BreakAfterSeventhInning = \"BreakAfterSeventhInning\", BreakAfterEighthInning = \"BreakAfterEighthInning\", BreakAfterNinthInning = \"BreakAfterNinthInning\" }"
  },
  "sports-data/endpoints/leagues/push-contract.html": {
    "href": "sports-data/endpoints/leagues/push-contract.html",
    "title": "Region | SBTech API",
    "keywords": "Region export interface Region { /** region ID */ id: string /** ISO country code or (for regions in country) region code */ code: string /** translated region name */ name: string activeSports: string[] activeSportsCount: number /** number of live (in-game) active games */ liveFixturesTotalCount: number /** total number of games, both live and pre-live */ fixturesTotalCount: number /** number of games, both live and pre-live filtered by time range*/ fixturesCount: number /** number of active outrights league bound markets */ outrightsTotalCount: number entityType: EntityType } export interface RegionChange { id: string, activeSports: string[], activeSportsCount: number, liveFixturesTotalCount: number, fixturesTotalCount: number, fixturesCount: number, outrightsTotalCount: number }"
  },
  "sports-data/endpoints/events/pull-contract.html": {
    "href": "sports-data/endpoints/events/pull-contract.html",
    "title": "Event | SBTech API",
    "keywords": "Event type Event = { id: string type: string sportId: string sportName: string sportOrder: number regionId: string regionCode: string regionName: string leagueId: string leagueName: string leagueOrder: number isTopLeague: boolean participants: Participant[] // Described in a separate table below. eventName: string betslipLine: string totalMarketsCount: number marketLinesCount: number marketGroups: MarketGroup[] // Described in a separate table below. startEventDate: ISODateTimeString status: string score: GameScore | null // Described in a separate table below. isLive: boolean isGoingLive: boolean liveGameState?: LiveGameState // Described in a separate table below. isTeamSwap: boolean isSuspended: boolean tags: string[] // Described in a separate table below. entityType: EntityType media?: MediaProvider[] // Described in a separate table below. metadata: Dictionary<any> // Described in a separate table below. } Name Description Format Returnable Queryable Example id Specifies the identifier of the sports event. string Yes query (using eq, ne, or, and, in) $filter=Id eq '11754652' entityType Specifies the type of the entity. Always 0 for events. number Yes No -- type Specifies the type of the sports event. Possible values are \"Fixture\" and \"Outright\" for most sports and \"AntePostRace\" and \"DayOfEventRace\" for racing sports. string Yes query (using eq, ne, or, and, in) $filter=type eq (ne) 'Fixture' sportId Specifies the identifier of the sport. string Yes query (using eq, ne, or, and, in) $filter=sportId eq (ne) '12' sportName Specifies the name of the sport (translated). string Yes query (using eq, ne, or, and, in) $filter=sportName eq 'Soccer' sportOrder Specifies the sorting order of the sport. number Yes $orderby (only asc ) $orderby=sportOrder asc regionId Specifies the identifier of the region. string Yes query (using eq, ne, or, and, in) $filter=regionId eq '260' regionCode Specifies ISO country code or (for regions in country) region code. string Yes query (using eq, ne, or, and, in) $filter=regionCode eq 'EN' regionName Specifies the name of the region. string Yes query (using eq, ne, or, and, in) $filter=regionName eq 'England' leagueId Specifies the identifier of the league. string Yes query (using eq, ne, or, and, in) $filter=leagueId eq '36690' leagueName Specifies the name (translated) of the league. string Yes query (using eq, ne, or, and, in) $filter=leagueName eq 'English Football League Cup' leagueOrder Specifies the sorting order of the league. number Yes (using eq, ne, or, and, in) $filter=leagueOrder eq 580150 isTopLeague Specifies if the league is marked with a top flag. Boolean Yes query (using eq, ne) $filter=isTopLeague eq false participants Specifies the participants in the event. Parameters of the Participant object are described in a separate table below. Array Yes query (using lambda, eq, ne, or, and, in) $filter=participants/any(p: p/id eq '357') eventName Specifies the name of the event. For events of type \"Fixture\" it is composed of participants name, e.g. \"ParticipantHome vs ParticipantAway\". Order of teams is reversed if swapTeams: true . If you want, you can ignore this value and compose it locally in a different format. string Yes query (using eq, ne, or, and, in) $filter=eventName eq 'Chelsea vs Bournemouth' betslipLine Specifies the presentation of the event in the bet slip in the context of each of its selections. To be used in conjunction with the respective Market.selections[].betslipLine and Market.betslipLine values. string Yes query (using eq, ne, or, and, in) $filter=betslipLine eq 'Clonmel: 12:15' marketGroups Specifies the market groups defined within the event. MarketGroup Yes query (using lambda, eq, ne, or, and, in) Сan't query this together with marketTypes. $filter=marketGroups/any(p: p/name eq 'Corners') totalMarketsCount Specifies the total markets count. Not affected by the IncludeMarkets filter, i.e. always returns the total count of available markets for the event. number Yes $orderby (only desc) $orderby=totalMarketsCount desc marketLinesCount Specifies the total number of markets, with point lines counted as separate markets. Not affected by the IncludeMarkets filter, i.e. always returns the total count of available markets for the event. number Yes query (using lambda, eq, ne, or, and, in) $filter=marketLinesCount eq 0 totalBets Number of bets placed for entity. number No $orderby (only desc) $orderby=totalBets desc totalDeposit Total deposit of all bets placed for entity. number No $orderby (only asc) $orderby=startEventDate asc startEventDate Specifies the date and time of the beginning of the event. ISODateTimeString Yes $orderby (only asc) $orderby=startEventDate asc status Specifies the status of the event. Possible values are \"NotStarted\", \"InProgress\" (for most sports), \"RaceOff\" (for racing sports), \"Resulted\" (supported only for racing sports got now; events from other sports will be removed before moving into this status). string Yes query (using eq, ne, or, and, in) $filter=status eq 'NotStarted' score Specifies the current score of the event. GameScore Yes query (using lambda, eq, ne, or, and, in) $filter=score/awayScore eq '0' isLive Specifies if the event is currently traded live. Boolean Yes query (using eq, ne) $filter=isLive eq false isGoingLive Specifies if the event is going live when started, can be true for pre-match events only. Boolean Yes query (using eq, ne) $filter=isGoingLive eq false liveGameState Specifies additional information on the event such as status, score, current time. See all parameters in a table below. LiveGameState Yes query (using lambda, eq, ne, or, and, in) $filter=liveGameState/gamePart eq 'SecondHalf' tags Specifies additional information on the event. string Yes query (using lambda, eq, ne, or, and, in) $filter=tags/any(s: s eq 'LiveStream') media Specifies list of available mapping data to external media providers for the event, such us live streaming, statistics, match tracker widgets etc. Media Yes query (using lambda, eq, ne, or, and, in) $filter=media/any(p: p/mediaType eq 'LiveStreaming') metadata Specifies additional information on the event. string Yes No -- isSuspended Specifies if the event is suspended. boolean Yes query (using eq, ne) $filter=isSuspended eq false isTeamSwap Specifies if the suggested presentation of the event implies to show the away team first. Relevant only for Fixture events. boolean Yes query (using eq, ne) $filter=isTeamSwap eq false Participant type Participant = { id: string name: string venueRole?: VenueRole country: string metadata: Dictionary<any> } Name Description Format Queryable Returnable id Specifies the identifier of the participant. string Yes Yes name Specifies the name of the participant. string Yes Yes venueRole Specifies the relation of the participant to the venue (home or away). Note that these will follow the customary designations, but in some cases could be fictitious. Also, no value will be assigned to participants in Outright events, even if one or more participants are considered to be competing on their \"home\" ground. This parameter is mostly intended to be used as a display signal for Fixture events. VenueRole: Home or Away Yes Yes country Specifies the ISO code of the country. String Yes Yes metadata Specifies additional information on the participant, such as runnerNumber: number, imageUrl: string, weight: string, age: number. Dictionary Yes Yes Possible Event.Participant.metadata dictionary entries for Horse racing events Parameter Description Format Queryable Returnable age Specifies the horse's rage. string No Yes form Specifies the horse's \"form\" information, when available. string No Yes jockey Specifies the name of the jockey. string No Yes trainer Specifies the name of the trainer. string No Yes runnerNumber Specifies the \"runner number\" of the horse. string No Yes stallNumber Specifies the number of the stall from which the horse will start the race. string No Yes weight Specifies the horse's weight. string No Yes runnerStatus Specifies the horse's runner status. Possible values are “Ante-post” (for horses participating in an Ante-post race), “DOE” (for horses participating in a DOE race), “NR” (for horses withdrawn from the race). string No Yes paFeedId Specifies the PA ID of a horse. string No Yes iconUrl Populated only for participants in racing events for now. Specifies the URL from which to fetch the silk icon for a horse or the trap icon for a hound. string No Yes resultingPosition Specifies the position of every participant after a racing event has resulted. string No Yes resultingStartingPrice States the starting price of the participant at the start of the event, used to settle the \"starting price\" bets. Always provided in fractional odds. string No Yes rule4 \"Rule 4\" statement for the horse, if it becomes non-runner. string No Yes rpr Horse rating, as provided by Racing post. string No Yes rpDiomedComment The race prediction for a horse, as provided by Racing post. string No Yes Possible Event.Participant.metadata dictionary entries for Greyhounds events | Parameter | Description | Format | Queryable | Returnable | |trapNumber| Specifies the trap number of the hound. | string | No | Yes | |runnerStatus| Specifies the horse's runner status. Possible values are “Ante-post” (for hounds participating in an Ante-post race), “DOE” (for hounds participating in a DOE race), “NR” (for hounds withdrawn from the race). | string | No | Yes | |paFeedId| Specifies value provided by the PA feed. | string | No | Yes | |iconUrl| Populated only for participants in racing events for now. Specifies the URL from which to fetch the silk icon for a horse or the trap icon for a hound. | string | No | Yes | |resultingPosition| Specifies the position of every participant after a racing event has resulted. | string | No | Yes | |resultingStartingPrice| States the starting price of the participant at the start of the event, used to settle the “starting price” bets. Always provided in fractional odds. | string |No | Yes | |rpDiomedComment| The race prediction for a horse, as provided by Racing post. | string | No | Yes | LiveGameState type LiveGameState = { clockRunning: Boolean clockDirection: string gameTime: number //In seconds gamePart: string } Parameter Description Format Queryable Returmable clockRunning Specifies if the in-game clock is currently running. Boolean Yes Yes clockDirection Specifies the clock direction. Two values are possible: \"Stopwatch\" (default, counting starts from 0 and continues until the clock is reset or the game ends) and \"Timer\" (counting starts from some specific value and goes down to 0) string Yes Yes gameTime Specifies the current in-game time in seconds. Note that presentation needs might differ depending on the sport. number Yes Yes gamePart Specifies the current part of the game. Note that this will differ per sport. string Yes Yes Possible Event.LiveGameState.gamePart values per sport NB: These values are intended as keys or identifiers, not as display values. They are not localised and they cannot be modified to serve specific display needs (like full or shortened/abbreviated presentation). Such issues have to be addressed client side. Soccer FirstHalf BreakAfterFirstHalf SecondHalf Overtime <!-- FirstOvertime BreakAfterFirstOvertime SecondOvertime --> Basketball FirstQuarter BreakAfterFirstQuarter SecondQuarter BreakAfterSecondQuarter ThirdQuarter BreakAfterThirdQuarter FourthQuarter BreakAfterFourthQuarter FirstOvertime BreakAfterFirstOvertime SecondOvertime Tennis FirstSet SecondSet ThirdSet FourthSet FifthSet Handball FirstHalf BreakAfterFirstHalf SecondHalf Ice hockey FirstPeriod BreakAfterFirstPeriod SecondPeriod BreakAfterSecondPeriod ThirdPeriod BreakAfterThirdPeriod Overtime American Football FirstQuarter BreakAfterFirstQuarter SecondQuarter BreakAfterFirstHalf ThirdQuarter BreakAfterThirdQuarter FourthQuarter BreakAfterFourthQuarter Overtime Rugby League FirstHalf BreakAfterFirstHalf SecondHalf Rugby Union FirstHalf BreakAfterFirstHalf SecondHalf Volleyball FirstSet SecondSet ThirdSet FourthSet FifthSet MarketGroup type MarketGroup = { id: string name: string order: number } Parameter Description Format Queryable Returnable id Specifies the identifier of the group. Will be referred from the [[Markets]] to help organize the layout of the event view. string Yes Yes name Specifies the name of the group. Note that this field is currently NOT localized. string Yes Yes order Specifies the order key for the group. number No Yes GameScore type GameScore = { homeScore: string awayScore: string combinedSecondTierScores: array additionalScores: Dictionary<any> } Parameter Description Format Queryable Returmable homeScore Specifies the score for the home team. Only a single value, representing the \"main\" score for the respective sport will be included. Usually, this would be the total number of points or goals for the respective team. For tennis the value will represent total sets won. For cricket the value will represent the \"runs for wickets\" score of the team. string Yes Yes awayScore Specifies the score for the away team. Same general format as @scoreHome@. string Yes Yes combinedSecondTierScores Will include an array of \"second tier\" (usually game part) scores. Facilitates displaying comprehensive score on coupon views. array Yes Yes additionalScores Provides a list of additional scores, e.g. per game part. Specific per sport. Dictionary Yes Yes Possible \"AdditionalScores\" properties per sport Below is a list of possible parameters which will appear under the additionalScores dictionary, depending on the sport of the event. A few general patterns and rules have to be taken into account: All values are in string format. Almost all properties will have an appendix or 1 or 2 in the name. These indicate score for the Home or Away team, respectively. For example, FirstHalfScore1 is the score of the Home team for the first half of a soccer game. The only exception is the onServe\" property, which will appear for several sports and will have a _value_ of 1 or 2. The pattern is the same -- onServe: 1 for a Volleyball game means that the Home team is serving. We use the onServe` parameter also for Baseball and Cricket events to allow easier, more generalised implementation, realising that it is not the correct technical term. Not all properties will be always returned. Missing pair of properties means that there is no score of the respective game part or (in rare cases) that we don't have the respective data. For example, during the third quarter of a basketball game, we will not return BasketballFourthQuarterScore1 and BasketballFourthQuarterScore2 parameters. Soccer FirstHalfScore1 FirstHalfScore2 SecondHalfScore1 SecondHalfScore2 ExtraTimeScore1 ExtraTimeScore2 YellowCardsTeam1 YellowCardsTeam2 RedCardsTeam1 RedCardsTeam2 CornersTeam1 CornersTeam2 PenaltiesTeam1 PenaltiesTeam2 Basketball BasketballFirstQuarterScore1 BasketballFirstQuarterScore2 BasketballSecondQuarterScore1 BasketballSecondQuarterScore2 BasketballFirstHalfScore1 BasketballFirstHalfScore2 BasketballThirdQuarterScore1 BasketballThirdQuarterScore2 BasketballFourthQuarterScore1 BasketballFourthQuarterScore2 BasketballSecondHalfScore1 BasketballSecondHalfScore2 BasketballResultType InputForPeriod BasketballOverTimeScore1 BasketballOverTimeScore2 Tennis onServe FirstSetScore1 FirstSetScore2 SecondSetScore1 SecondSetScore2 ThirdSetScore1 ThirdSetScore2 FourthSetScore1 FourthSetScore2 FifthSetScore1 FifthSetScore2 CurrentGameScore1 CurrentGameScore2 American Football AmericanFootball1QScore1 AmericanFootball1QScore2 AmericanFootball2QScore1 AmericanFootball2QScore2 AmericanFootball3QScore1 AmericanFootball3QScore2 AmericanFootball4QScore1 AmericanFootball4QScore2 AmericanFootball1HScore1 AmericanFootball1HScore2 AmericanFootball2HScore1 AmericanFootball2HScore2 Baseball onServe FirstInningScore1 FirstInningScore2 SecondInningScore1 SecondInningScore2 ThirdInningScore1 ThirdInningScore2 FourthInningScore1 FourthInningScore2 FifthInningScore1 FifthInningScore2 SixthInningScore1 SixthInningScore2 SeventhInningScore1 SeventhInningScore2 EighthInningScore1 EighthInningScore2 NinthInningScore1 NinthInningScore2 Ice hockey IceHockeyFirstPeriodScore1 IceHockeyFirstPeriodScore2 IceHockeySecondPeriodScore1 IceHockeySecondPeriodScore2 IceHockeyThirdPeriodScore1 IceHockeyThirdPeriodScore2 Volleyball onServe VolleyballFirstSetScore1 VolleyballFirstSetScore2 VolleyballSecondSetScore1 VolleyballSecondSetScore2 VolleyballThirdSetScore1 VolleyballThirdSetScore2 VolleyballFourthSetScore1 VolleyballFourthSetScore2 VolleyballFifthSetScore1 VolleyballFifthSetScore2 Aussie rules AussieRules1HScore1 AussieRules1HScore2 AussieRules2HScore1 AussieRules2HScore2 AussieRules1QScore1 AussieRules1QScore2 AussieRules1QGoalScore1 AussieRules1QGoalScore2 AussieRules1QBehinds1 AussieRules1QBehinds2 AussieRules2QScore1 AussieRules2QScore2 AussieRules2QGoalScore1 AussieRules2QGoalScore2 AussieRules2QBehinds1 AussieRules2QBehinds2 AussieRules3QScore1 AussieRules3QScore2 AussieRules3QGoalScore1 AussieRules3QGoalScore2 AussieRules3QBehinds1 AussieRules3QBehinds2 AussieRules4QScore1 AussieRules4QScore2 AussieRules4QGoalScore1 AussieRules4QGoalScore2 AussieRules4QBehinds1 AussieRules4QBehinds2 AussieRulesGoalScoreTotal1 AussieRulesBehindsTotal1 AussieRulesGoalScoreTotal2 AussieRulesBehindsTotal2 Rugby league RugbyLeague1HScore1 RugbyLeague1HScore2 RugbyLeague2HScore1 RugbyLeague2HScore2 RugbyLeagueTriesFTScore1 RugbyLeagueTriesFTScore2 RugbyLeagueTries1HScore1 RugbyLeagueTries1HScore2 RugbyLeagueTries2HScore1 RugbyLeagueTries2HScore2 Cricket onServe Tags Name Description Stats Integration with statistics provider is available for the event. LiveStream Integration with live streaming provider is available for the event. MatchTracker MatchTracker widget is switched on for the event. Scoreboard Scoreboard widget is switched on for the event. ToteGreyhounds For Tote events, that have Greyhound trackType. ToteHarness For Tote events, that have Harness trackType. ToteHorses For Tote events, that haven't Greyhound or Harness trackType. USRace The event is with US region. FastMarket Fast markets are available for the event. Pulse Pulse markets are available for the event. BestOddsGuaranteed BOG parameter is activated for the event. Vidiprinter Specifies availability vidiprinter/incidents feed for a given event. Media type Media = { providerName: string mediaType: string providerEventId: string } Name Description Format Returnable Queryable providerName Specifies the provider for the mapping information. string Yes Yes mediaType Specifies the type of media content being mapped. string Yes Yes providerEventId Specifies the provider ID for this event to allow mapping to the respective provider content. string Yes No Possible providerName values These are providers for which mapping data is currently supported in the SBTech system. Note that access to data linked to the listed providers is usually subject to additional licencing agreements. Data will be served in the API only if these are cleared and access to this content is activated in the SBTech system for the respective operator. ATRWB BetRadarStats BetRadar IMG Perform RacingUKWB Unas UnasMobile Possible mediaType values Name Description Stats Integration with statistics provider is available for the event. LiveStreaming Integration with live streaming provider is available for the event. MatchTracker MatchTracker widget is switched on for the event. Scoreboard Scoreboard widget is switched on for the event. Vidiprinter Specifies availability vidiprinter/incidents feed for a given event. Metadata Parameter Description Format Returnable Queryable tennisMatchtype Indicates the format of a tennis match. Possible values are 3 and 5. String Yes No tennisLastSetIsAdvantageSet Indicates if the last set of a tennis match is an advantage set. Possible values are 0 (false) and 1 (true). String Yes No tennisSurface Indicates Indicates the surface of the tennis match. Possible values are 0 (unknown surface), 1 (carpet court), 2 (clay court), 3 (hard court), 4 (grass court). String Yes No BoxingNumberOfRounds Indicates the number of rounds in boxing events. Default is 12, can return custom value. String Yes No secondsInOnePart Will be served for soccer and basketball games and define the length of a part (half and quartner, respectively). String Yes No numberOfParts For some sport, will define the number of game parts. String Yes No raceHour For racing events only, the race hour in UTC. String Yes No raceGoing \"Going\" statement for a racing event. String Yes No forecastResult Presentation of the Forecast result for a racing event. Provided after the race finish. Format will be like \"2-4\", where the digits represent the runner number of the participants in the order in which they finished the race. String Yes No tricastResult Presentation of the Tricast result for a racing event. Provided after the race finish. Format will be like \"2-4-1\", where the digits represent the runner number of the participants in the order in which they finished the race. String Yes No forecastDividend The dividend used to settle Forecast bets for a racing event. String Yes No tricastDividend The dividend used to settle Tricast bets for a racing event. String Yes No rpRaceDistance For racing events only, the race distance, as provided by Racing post. String Yes No rpRaceType For racing events only, the race type, as provided by Racing post. String Yes No rpDiomedVerdict For racing events only, the race description, as provided by Racing post. String Yes No"
  }
}